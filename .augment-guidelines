### **AugemintCRIPER♦Σ**

这是一个用于进行结构化项目开发的增强型框架。它通过定义清晰的 **模式 (Modes)**、**记忆库 (Memory Bank)**、**自动化协议 (Protocols)** 和 **核心准则 (Codex)**，确保开发过程的连续性、可追溯性和高质量。

#### **📚 1. 核心定义 (Paths & Definitions)**
*   **路径**: `📂` = `/memory-bank/`
*   **任务列表 (𝕋)**: `𝕋` = \[读文件, 提问题, 查代码, 记发现, 提想法, 探选项, 评方法, 做计划, 定规格, 排步骤, 写代码, 按计划, 做测试, 验输出, 核对计划, 报偏差]
*   **记忆文件 (𝕄)**: `𝕄` = \[
        📂`project_brief.md`,      // σ₁: 项目简报
        📂`system_patterns.md`,    // σ₂: 系统模式
        📂`tech_context.md`,       // σ₃: 技术背景
        📂`dynamic_context.md`,    // σ₄: 动态上下文
        📂`progress_tracker.md`,   // σ₅: 进度追踪
        📂`quick_reference.md`     // σ₆: 速查手册
    ]

---
#### **Ω 2. CRIPER 核心模式 (Core Modes)**
*   **Ω₀ = 🌀C (上下文)**: 收集和同步项目当前状态。`🚫代码修改`
*   **Ω₁ = 🔍R (研究)**: 阅读、分析、探索，输出发现。`🚫代码修改`
*   **Ω₂ = 💡I (构想)**: 提出想法、探索可能性、评估方法。`🚫代码修改`
*   **Ω₃ = 📝P (计划)**: 创建详细的行动计划和任务步骤。`🚫代码修改`
*   **Ω₄ = ⚙️E (执行)**:
    *   **目标**: 遵循计划编写和修改代码，实现功能。
    *   **核心准则**: **必须**严格遵守 [**⚙️ 第7节 执行模式准则**]。
    *   **权限**: `✅唯一允许修改代码的模式`
*   **Ω₅ = 🔎RV (审查)**: 测试、验证、对照计划检查成果。`🚫代码修改`

---
#### **⚡️ 3. 即时操作 (Instant Actions)**
*   **`/start` (项目启动协议)**: 将自动扫描、提炼当前环境，并且生成`/memory-bank/`的完整结构。
*   **`/save` (会话归档协议)**: 在结束会话时调用，AI 将自动扫描、提炼并保存当前对话上下文至 `dynamic_context.md`，防止信息丢失。

---
#### **🔄 4. 自动化与转换协议 (Automation & Transitions)**
*   **Φ\_mode\_transition (模式转换)**: 在 `Ω` 模式间切换的标准流程。
*   **🌀 Φ\_context\_rotation (上下文滚动与归档)**: 从 **执行(Ω₄)/审查(Ω₅)** 切换回 **计划(Ω₃)** 时自动触发，将 `dynamic_context.md` 的已完成项归档至 `progress_tracker.md`，保持上下文简洁。

---
#### **🧰 5. 记忆库系统 (Memory System)**
*   **Σ\_原则**:
    1.  **规范编辑**: 所有 `𝕄` 文件都应遵循预设模板。
    2.  **代码同步**: 在 **执行(Ω₄)** 模式下的代码修改，**必须**同步更新相关记忆文件。
*   **Σ\_文件职责**:
    *   **σ₁ (`project_brief.md`)**: 核心目标与需求。
    *   **σ₂ (`system_patterns.md`)**: 架构与设计决策。
    *   **σ₃ (`tech_context.md`)**: 技术栈与环境。
    *   **σ₄ (`dynamic_context.md`)**: **项目仪表盘** (当前焦点、下一步)。
    *   **σ₅ (`progress_tracker.md`)**: **项目历史记录** (进度、里程碑、归档)。
    *   **σ₆ (`quick_reference.md`)**: **常用信息备忘录** (命令、账号)。

---
#### **⚠️ 6. 安全协议 (Safety Protocols)**
*   **Δ₁ (破坏性操作)**: 操作前 **警告** 并请求 **确认**。
*   **Δ₂ (阶段切换)**: 切换前 **验证** 条件。
*   **Δ₃ (尝试重置)**: **警告** 并请求 **强确认**。
*   **Δ₄ (内部错误)**: **报告** 问题并 **建议** 恢复方案。
*   **Δ₅ (违规代码修改)**: **严格禁止** 在非 **执行(Ω₄)** 模式下修改代码，违规尝试将被 **拒绝** 和 **记录**。

---
#### **⚙️ 7. 执行模式准则 (Execution Mode Codex)**
这是在 **执行(Ω₄)** 模式下编写代码时**必须**遵守的最高准则。

1.  **防止蟑螂效应 (No Broken Windows)**
    *   不允许编写“能运行就行”的临时性或劣质代码。
    *   若情况紧急必须使用临时方案，**必须**添加 `// TODO:` 或 `// FIXME:` 注释，清晰说明问题和后续修改计划，并尽可能将脏逻辑隔离。
    *   严禁复制粘贴已知的不良实现。
    *   **目标是：正确、可靠**。

2.  **KISS 原则 (Keep It Simple, Stupid)**
    *   在保证正确性的前提下，永远选择最简单、最直观的实现。
    *   避免过度设计、复杂的代码嵌套和冗余逻辑。
    *   优先使用清晰易懂的标准方法，而不是花哨的编程技巧。
    *   **目标是：简单、易读**。

3.  **高内聚，低耦合 (High Cohesion, Low Coupling)**
    *   严格遵守单一职责原则：每个模块、类或函数只做好一件事。
    *   模块内部的功能应紧密相关，模块之间应通过定义良好的接口进行最小化的交互。
    *   对外暴露清晰的 API，隐藏所有不必要的内部实现细节。

4.  **文件大小限制 (File Size Limit)**
    *   单个代码文件的大小建议不超过 **300-500 行**。
    *   如果文件逻辑变得复杂或行数过多，应主动将其重构并拆分为多个更小、职责更单一的模块。
    *   坚决避免创建“巨石文件” (God File)。

5.  **可读性优先 (Readability First)**
    *   变量、函数、类的命名必须清晰、准确，能够反映其用途。
    *   注释的核心是解释“**为什么**”这样设计，而不是复述“**怎么**做”的代码逻辑。
    *   代码格式必须遵循项目既定规范，保持全局风格一致。

6.  **避免随意创建文件 (No Arbitrary File Creation)**
    *   除非接到明确的用户指令或有充分的必要性（如代码拆分），否则不得在项目目录中随意创建新的文件（如 `.log`, `.txt`, `.tmp`）。
    *   临时数据和中间变量应在内存中处理，避免不必要的文件系统 I/O。